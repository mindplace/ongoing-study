# 1. If we list all the natural numbers below 10 that are multiples of 3 or 5, 
# we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

def sum_of_multiples
    sum = 0
    (1...1000).each do |num|
        sum += num if num % 3 == 0 || num % 5 == 0
    end
    sum
end

# 2. Each new term in the Fibonacci sequence is generated by adding 
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed 
# four million, find the sum of the even-valued terms.

def fibonacci_sum
    fib_array = [1, 2]
    while fib_array.last < 4000000
        fib_array << fib_array[-1] + fib_array[-2]
    end
    fib_array.select{|num| num % 2 == 0}.inject(:+)
end

# 3. The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

def helper(num)
    prime = true
    (2...num).each{|x| 
        prime = false if num % x == 0
        break if prime == false
    }
    prime
end

def largest_prime_factor(number)
    x = 2
    prime = []
    product = 1
    while product < number
        if ((number % x == 0) && (helper(x) == true))
            prime << x
            product *= x
        end
        x += 1
    end
    prime.last
end

# 4. A palindromic number reads the same both ways. 
# The largest palindrome made from the product of two 2-digit numbers 
# is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def factors(array)
    array.combination(2).to_a.map{|set| set.inject(:*)}
end
  
def palindromes
    (998001.downto(10000)).to_a.select{|x| x == x.to_s.reverse.to_i}
end

def palindromic
    palindrome = []
    palindromes.each do |item|
        factor_array = (999.downto(100)).to_a.select{|x| item % x == 0}
        palindrome << item if factors(factor_array).include?(item)
        break if palindrome.length == 1
    end
    palindrome[0]
end


# 5. 2520 is the smallest number that can be divided by 
# each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly 
# divisible by all of the numbers from 1 to 20?

def least_common(a, b)
    if a > b 
        lcm = a
        until (lcm % b == 0)
            lcm += a
        end
    else
        lcm = b 
        until (lcm % a == 0)
            lcm += b 
        end
    end
    lcm
end

def iterates(array)
    next_branch = []
    array.each_with_index do |num, i|
        break if array[i] == array.last
        next_branch << least_common(array[i], array[i + 1])
    end
    next_branch
end

def smallest_multiple
    factor_array = (1..20).to_a
    next_branch = iterates(factor_array)
    while next_branch.length > 1
        next_branch = iterates(next_branch)
    end
    next_branch[0]
end

# 6. The sum of the squares of the first ten natural numbers is,
#   (1**2 + 2**2 + ... + 10**2) = 385
# The square of the sum of the first ten natural numbers is,
#   (1 + 2 + ... + 10)**2 = 55**2 = 3025
# Hence the difference between the sum of the squares of the first ten 
# natural numbers and the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the 
# first one hundred natural numbers and the square of the sum.

def sum_square_diff(max)
    range = (1..max).to_a
    sum = range.map{|i| i ** 2}.inject(:+)
    square = range.inject(:+) ** 2
    square - sum
end


# 7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, 
# we can see that the 6th prime is 13.
# What is the 10 001st prime number?


def find_prime(number)
    range = [0, 0, 2]
    max = number * 30
    (3..max).each do |num|
        num.odd? ? (range << num) : (range << 0)
    end
    i = range[3]
    while true
        (i*i).step(max, i) do |num|
            range[num] = 0
        end
        i = range.find{|num| (num > i)}
        break if i*i > range.length
    end
    range = range.reject{|num| num == 0}
    range[number - 1]
end


# 8. Largest Product in a Series
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
# What is the value of this product?


def product(num, digits)
    num = num.to_s.split("").map{|i| i.to_i}
    products = []
    num.each_with_index do |x, i|
        break if i > (num.length - 13)
        set = num[i..(i + (digits - 1))]
        products << set.inject(:*)
    end
    products.max
end


# 9. Special Pythagorean Triplet
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
# =>    a2 + b2 = c2
# For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

def square_nums
    squares = []
    (1..1000).each{|num| squares << (num ** 2)}
    squares
end

def square_root(num)
    (1..(num / 2)).to_a.select{|x| x ** 2 == num}[0]
end

def find_and_sum_square_roots(max, pythagoreans)
    result = 0
    pythagoreans.each do |combo|
        a = square_root(combo[0])
        b = square_root(combo[1])
        c = square_root(combo[2])
        if (a + b + c) == max
            result = (a * b * c)
            break
        end
    end
    result 
end

def pythagoreans
    potentials = square_nums
    pythagoreans = []
    
    potentials.each_with_index do |a_sq, i1|
        i2 = i1 + 1
        while i2 < (potentials.length - 1)
            i3 = i2 + 1
            b_sq = potentials[i2]
            while i3 < (potentials.length)
                c_sq = potentials[i3]
                if a_sq + b_sq == c_sq
                    pythagoreans << [a_sq, b_sq, c_sq]
                end
                i3 += 1
            end
            i2 += 1
        end
    end
    find_and_sum_square_roots(1000, pythagoreans)
end


# 10. Prime summation
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.
#
# Even though I managed to create a sieve of Eratosthenes as part of
# my solution, it doesn't solve the problem fast enough. There's an element
# that's missing.
# Update - figured it out! I made the while loop break if the square of i was
# greater than the length of the range. Not seeing it before feels so silly. 

def get_range(max)
    range = [0, 0, 2]
    (3..max).each do |num|
        num.odd? ? (range << num) : (range << 0)
    end
    range
end

def sum_of_primes(max)
    range = get_range(max)
    i = range[3]
    while true
        (i*i).step(max, i) do |num|
            range[num] = 0
        end

        i = range.find{|item| (item > i)} #regular search, time = 0.96
        #i = range.bsearch {|item| (item > i)} #bsearch, time = 0.64
        break if i*i > range.length
    end
    range.inject(:+) #3682913
end
